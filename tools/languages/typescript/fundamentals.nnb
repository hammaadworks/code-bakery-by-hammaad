{
    "cells": [
        {
            "language": "typescript",
            "source": [
                ""
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "- statically typed, strong type\n- JS with type checking\n- Compilaiton\n- Transpilation (ts -> js)\n- sudo npm i -g typescript\n- tsc <file>\n- Superset of JS\n- magic lies in tsconfig.json"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "let a: number = 10;\nconsole.log(a);\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "10",
                                ""
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "language": "markdown",
            "source": [
                "- To generate ```tsconfig.json``` run *```tsc --init```*\n- You can configure input and output directories\n- To transpile ts -> js. run ```tsc <file/folder>```"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Debugging in VS code\n- Enable sourceMap from tsconfig.json\n- Create a launch.json file\n- preLaunchTask: \"tsc: build - tsconfig.json\"\n- Refer ts-demo-momo folder for more."
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "Built in types\n- any: common datatype\n    - number[]\n    - any[]\n- never: \n- enum: constant gives more optimised code.\n    - const enum Size { Small, Medium, Large }\n- unknown:\n- tuple: pairs\n    - [number, string]\n\n\n"
            ],
            "outputs": []
        },
        {
            "language": "typescript",
            "source": [
                "type Employee = {\n    readonly id : number,\n    name: string,\n    lastname?: string,\n    promote: (increment: number) => number\n}\n\nlet employee: Employee = {\n    id: 1, \n    name: \"Hammaad\", \n    promote(increment: number) {return increment * 200} \n}\n\nconsole.log(employee)\nconsole.log(employee.promote(200));\n"
            ],
            "outputs": [
                {
                    "items": [
                        {
                            "mime": "application/vnd.code.notebook.stdout",
                            "value": [
                                "{ id: 1, name: 'Hammaad', promote: [Function: promote] }",
                                "40000",
                                ""
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}